  
Process Notes for React Shopping List
============================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.



Objective of Study
==================
Create a shopping list app in React that utilizes callback props to pass state between components. 

This shopping list app is going to cover the issues associated with updating the shopping list itself and utilizing callback props. Specifically
we'll tackle updating the state of the component in practice and utilizing callback props. This is going to cover planning and project setup as 
well so that the workflow can be refined for the next project.




Project outline
================
This is going to be a basic shopping list application, so the most essential thing the app is going to need is an input field, and submission button, and
a list of the items that have been added. Each item will be listed and will have option of checking or deleting it.


First, a basic wireframe...

Basic Wireframe
=========================================
[Title of Application]
[Input Field] [Add Item Button]
[Item 1][Check][Delete]
[Item 2][Check][Delete]
[Item 3][Check][Delete]

Basic Wireframe (broken up into components)
===========================================
---------------------------------------        1. App component -- "App"
[Title of Application]                 |   
[Input Field] [Add Item Button]        |       2. Add item component -- "AddItemForm"  
[Item 1][Check][Delete]                |       3. Shopping list -- "ShoppingList"
[Item 2][Check][Delete]                |       4. Sopping item -- "ShoppingItem"
[Item 3][Check][Delete]                |
----------------------------------------


Second, consider where the state will live...
* To consider where the state will live, you need to think about where the components will need access to the state.
* Which components will UPDATE the state and which will READ the state.
* In this case, the shpping items can changeby adding, deleting, or checking items. The user can also interact with the form
  to add items and click on buttons on individual items to check and delete the items.
* In this case, "AddItemForm" and "ShoppingItem" as places for the state to live.

Now for the "AddItemForm"...
1. The user willo submit the form.
2. the onSubmit event of the form would be the trigger.
3. The state is updated with the newly submitted shopping item.
4. Place the state in the LOWEST COMMON ANCESTOR of the components that read and update state (in this case, "App").



Project Implementation
=======================
First, tackle the App component first.
* Checkout the use of "<>" in the JSX... this is a "fragment" that you can use instead of "div" since the div isnt really needed.
--------------------------------------------------------------------------------
    import React from "react";                                                  // Add React
    import AddItemForm from './shopping-list/AddItemForm';                      // Import "AddItemForm".
    import ShoppingList from './shopping-list/ShoppingList';                    // IMport "ShoppingList".

    class App extends React.Component {                                         // Class component "App":
      state = {                                                                 // The state (where we decided the state would live since this is the lowest common ancestor)
        shoppingItems: [                                                        // ... and add stub items for the app to show in demo.
          { name: 'apples', checked: false },
          { name: 'oranges', checked: true },
          { name: 'bread', checked: false },
        ]
      };

      render() { 
        return (
          <>                                                                    // **use of fragment instead of div**
            <header>
              <h1>Shopping List</h1>
            </header>
            <main>
              <section>
                <AddItemForm />                                                  // AddItemForm component.
              </section>
              <section>
                <ShoppingList items={this.state.shoppingItems} />                // ShoppingList components (with items from state).
              </section>
            </main>
          </>
        )
      }
    }
--------------------------------------------------------------------------------

For the AddItemFrom, we'll just do the basic UI for the form.
--------------------------------------------------------------------------------
  export default class AddItemForm extends React.Component {
    render() {
      /* TODO: need to wire up the form to add items in App state... */
      return (
        <form>
          <input
            type='text'
            placeholder='carrots'
            aria-label='Shopping list item'
          />
          <button type='submit'>Add Item</button>
        </form>
      )
    }
  }
--------------------------------------------------------------------------------

For the ShoppingList component, the list is going to be populated 
--------------------------------------------------------------------------------
  import React from 'react'
  import ShoppingItem from './ShoppingItem'

  export default function ShoppingList(props) {
    return (
      <ul>
        {props.items.map((item, i) =>                                            // map for each shopping list item.
          <ShoppingItem
            key={i}
            item={item}
          />
        )}
      </ul>
    )
  }

  ShoppingList.defaultProps = {
    items: []
  }
--------------------------------------------------------------------------------

For the ShoppingItem component, it will display individual items.
--------------------------------------------------------------------------------
  import React from 'react'

  export default function ShoppingItem(props) {
    return (
      <li>
        <h2 style={{
          textDecoration: props.item.checked ? 'line-through' : null,
        }}>
          {props.item.name}
        </h2>
        <button type='button'>check</button>
        <button type='button'>delete</button>
      </li>
    )
  }

  ShoppingItem.defaultProps = {
    item: {}
  }
--------------------------------------------------------------------------------


Add tests for each of the components.

Test for ShoppingItem
------------------------------------------------------------------------------
  import React from 'react';
  import { shallow } from 'enzyme'
  import toJson from 'enzyme-to-json'
  import ShoppingItem from './ShoppingItem';

  describe(`ShoppingItem component`, () => {
    it('renders empty given no item', () => {
      const wrapper = shallow(<ShoppingItem />)
      expect(toJson(wrapper)).toMatchSnapshot()
    })

    it('renders the item when supplied', () => {
      // We're adding props to the ShoppingItem for different test cases
      const testItem = { name: 'test-item', checked: false }
      const wrapper = shallow(<ShoppingItem item={testItem} />)
      expect(toJson(wrapper)).toMatchSnapshot()
    })

    it('strikes through checked items', () => {
      const testItem = { name: 'checked-item', checked: true }
      const wrapper = shallow(<ShoppingItem item={testItem} />)
      expect(toJson(wrapper)).toMatchSnapshot()
    })
  })
------------------------------------------------------------------------------

Test for ShoppingList
------------------------------------------------------------------------------
  import React from 'react';
  import { shallow } from 'enzyme'
  import toJson from 'enzyme-to-json'
  import ShoppingList from './ShoppingList';

  describe(`ShoppingList component`, () => {
    it('renders empty given no items', () => {
      const wrapper = shallow(<ShoppingList />)
      expect(toJson(wrapper)).toMatchSnapshot()
    })

    it('renders ShoppingItems when supplied with an items prop', () => {
      const testItems = [
        { name: 'test item 1', checked: false },
        { name: 'another test item', checked: true },
        { name: 'test item number three', checked: false },
      ]
      const wrapper = shallow(<ShoppingList items={testItems} />)
      expect(toJson(wrapper)).toMatchSnapshot()
    })
  })
------------------------------------------------------------------------------

Test for AddItem
------------------------------------------------------------------------------
  import React from 'react';
  import { shallow } from 'enzyme'
  import toJson from 'enzyme-to-json'
  import AddItemForm from './AddItemForm';

  describe(`AddItemForm component`, () => {
    it('renders the complete form', () => {
      const wrapper = shallow(<AddItemForm />)
      expect(toJson(wrapper)).toMatchSnapshot()
    })
  })
------------------------------------------------------------------------------


At this point, the app has structure, three components 




UPDATING state
===================================
So at this point, the app has structure, three components and the tests utilizing enzyme.
However, what we lack now is exactly how to update the state that lives in the App component.

To update state, you need to use CALLBACK PROPS.

In React, a callback prop is a function that a parent component passes as a prop to a child component.

In the shopping list application, each ShoppingItem has two buttons: Delete and Check. We need to use
callback props to implement the buttons.



First, the App component needs to give the children (i.e. ShoppingItem, AddItemForm, and ShoppingList) callback props.
  * Callback props are functions.
  * One callback function is given to each of the actions you need to perform.
  * In this example, the callback functions here are the handleDeleteItem and handleCheckItem. 
  * These props are in the "ShoppingList" prop, so they need to be passed through this component to work.
---------------------------------------------------------------------------------
  class App extends React.Component {
    state = {
      shoppingItems: [          
        { name: 'apples', checked: false },
        { name: 'oranges', checked: true },
        { name: 'bread', checked: false },
      ]
    };

    handleDeleteItem() {                                                          // 2.1 callback function for the user clicking the delete button
      console.log('handle delete item called');
    }

    handleCheckItem() {                                                           // 2.2 callback function for the user clicking the check button
      console.log('handle check item called');
    }

    render() {
      return (
        <>
          <header>
            <h1>Shopping List</h1>
          </header>
          <main>
            <section>
              <AddItemForm />
            </section>
            <section>
              <ShoppingList 
                items={this.state.shoppingItems}     
                onDeleteItem={this.handleDeleteItem}                              // 1.1 "onDeleteItem" callback prop 
                onCheckItem={this.handleCheckItem}                                // 1.2 "onCheckItem" callback prop
              />
            </section>
          </main>
        </>
      )
    }
  }
---------------------------------------------------------------------------------


Second, give the ShoppingList component access to the button nodes
* The reason why you do this is so that you dont have to give the callback props to each ShoppingItem.
* So for each ShoppingItem, we'll add (and keep) the props we want to pass through.
------------------------------------------------------------------------------------
    export default function ShoppingList(props) {
      return (
        <ul>
          {props.items.map((item, i) =>
            <ShoppingItem
              key={i}
              item={item}
              onDeleteItem={props.onDeleteItem}                                   // passed "onDeleteItem" prop.
              onCheckItem={props.onCheckItem}                                     // passed "onCheckItem" prop.
            />
          )}
        </ul>
      )
    }
------------------------------------------------------------------------------------



